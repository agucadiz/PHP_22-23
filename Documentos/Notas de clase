22-09-22-------------------------------------------------------------------------------------
Request & response
GET & POST
Protocolo HTTP

Cookies --> 4 Kbytes --> 50 cookies --> 200 Kbytes max

sudo dpkg -i __________________________________ --> para instalar un paquete
sudo apt -f install --> si da algún error

Ciente    --> Servidor Web	--> Servidor de aplicaciones	--> SGBD     --> BD
Navegador --> Apache   		--> PHP 			--> Postgres --> BD


23-09-22------------------------------------------------------------------------------------
SAPI (cli, apache2, php-fpm)

cd /etc/php/8.1/cli
sudo nano php.ini
control + W --> Buscar en nano
error_reporting = E_ALL
display_errors = On
display_startup_errors = On
date.timezone = 'UTC'

cd conf.d  --> Modulos disponibles

Modos de ejecución PHP:
- Por lotes (script)
- Interactivo --> php -a (consola)  //  psysh  (Control + D) --> Salir

wget https://psysh.org/psysh
chmod +x psysh
sudo chown root.root psysh
sudo mv psysh /usr/local/bin
psysh (control+c para salir)

control + f1
activar la sincronización

control + , --> parametros de configuración del code


26-09-22-------------------------------------------------------------------------------------
Todas las variables empiezan por $
Destruir variable: unset()
Asignación compuesta

Asignación por referencia:
$x = 4;
$y = & $x; ($y = 4)

Variables predefinidas:
Variables super-globales: $_variable
$argc --> Número de argumentos pasados a un script
$argv --> Array de argumentos pasados a un script


27-09-22-------------------------------------------------------------------------------------
red.string.php  -->  Manipulación de cadenas
- strlen()
- trim()
- strpos() --> Encuentra la primera ocurrencia de un substring en un string.
- strstr() --> Encuentra la primera aparición de un string

Extensión mbstring (importante)

php -i | less

sudo apt install php8.1-mbstring --> INSTALAR

mb_substr()

mb --> para caracteres especiales como ñ o á

isset()  -->  Si la variable existe y no es nula.
empty() 
gettype()
is_numeric()
ctype_digit() --> espera un string

Manipulación de tipos.
Forzado de tipos.


29-09-22---------------------------------------------------------------------------------------
operador ternario:
condicion ? expresion1 : expresion2
1 == 1    ? "si"       : "no"        -->  ("si") 

Operador Elvis:
Expresion1 ?: Expresion2  
"hola"     ?: "pepe"      -->  ("hola")
""         ?: "pepe"      -->  ("pepe")

Estructuras de control:
- Secuencial  -->  Bloque de código
- Repetitiva  -->  while, do while, for
- Selectiva   -->  if, if else, switch
- Alternativa -->  if endif, switch endswitch...


30-09-22---------------------------------------------------------------------------------------
foreach ($a as $k => $v) {
	echo $v "\n";
	}

funciones array --> filter, reduce, map...

& --> paso por referencia, función impura, cambia el array original.

$b = $a;  --> lo copia.
$b = &$a; --> asignación por referencia, apunta al objeto.

interpolación de cadenas o expansión de variable.
echo "$k => $v\n";

print_r($a) -->  para volcar las variables.

var_dump() --> para depuración.

array_merge() --> unir arrays

label (for) = input (id)

php -S   -->   Encender el servidor PHP

php -S 0.0.0.0:8000  (Encender el servidor)

127.0.0.1:8000  -->  para encender el servidor

$_GET[] --> variable super global

Son equivalentes:
<?php echo $_GET['dni'] ?>
<?= $_GET['dni'] ?>


03-10-22
Paso de argumentos por valor

require, require_once, include, include_once

Diferencia del require y el include es que el require da un error y para el programa y el include da un warning y el programa sigue. Se utiliza mas el require pq nos interesa que nos de el error y pare el programa.

const --> puedes utilizarlo en ambito global y local
variable global --> solo global (amenos que se ponga en el ambito local 
global $varible. --> Mejor no utilizar variables globales.

ricpelo / dwese 2022 2023 ----------------> git hub

04-10-22------------------------------------------------------------------------
gh auth login
argumento por referencia --> mirar &argumento (es un argumento mutable)
parametros por defecto siempre al final
Tipo unión --> float | string
declare(strict_types=1); --> tipado estricto
void no devuelve nada, void != null
?float --> tipo nulable = float | null


06-11-22-------------------------------------------------------------------------
extract()  -->  crear variables.  $var = ['x' => 4, 'y' => 3]
compact()  -->  Al revés. $x = 4, $y = 3

in_array(aguja, pajar)
array_chunk($a, 2) --> Array de arrays
array_keys()
array_values()
array_combine($x, $y)
array_shift() --> como el pop() pero el primero.
array_unshift -->lo introduce al principio del array.
$a[]=3  --> introduce el 3 al final del array.

funciones de orden superior:
array_map()
array_filter()
array_reduce()


07-10-22------------------------------------------------------------------------
Manipular con fechas:
date('Y-m-d  H:i:s w')  -->  Formatear una hora en tiempo Unix.
time()  -->  Devuelve el tiempo unix.

new --> instanciar una clase.

__Construct  -->  Constructor

$fecha = new DateTime();

instanceof --> Da verdadero o falso.

::  -->  Operador de resolución de ámbito. (DateTimeInterface::ATOM) Es un token que permite acceder a elementos estáticos, constantes, y sobrescribir propiedades o métodos de una clase.

Estructura de clase:
- Clase.
- Interfaz.
- Rasgo.

$fecha -> getTimezone()

Zona horaria que utilizamos es Europa/Madrid.

Orientación a objetos:
$fecha->setTimezone(new DateTimeZone('Europe/Madrid'));

$dos_dias = new DateInterval('P2D')

Referencias al objeto:
$nueva = $fecha; 	Asignación por valor (variable(*) no compartida).
$nueva = &$fecha; 	Asignación por referencia (variable(*) compartida).
$nueva = clone $fecha; 	Clona el objeto.

Comparación de objetos:
- Comparación flexible		$a==$b		¿Son iguales?
- Comparación estricta		$a===$b		¿Son identicos?

Propiedades predeterminada de un objeto, viene definida por la clase del objeto.

unset()  -->  Destruye variables.

Casting:
(object) [...];  -->  Crea un objeto y los elementos del array son las propiedades del objeto.
(array) [...];  -->  Crea un array de un objeto.

get_class(...)  -->  Te da el nombre de la clase.


10/10/22-------------------------------------------------------------------------
Error -->
Excepción --> Los creamos nosotros.

Manejador de errores --> set_error_handler(...)

try{
...
} catch {
...
} finally {
...
}

PHP tiene dos operadores de objetos.
El primero, ->, se usa cuando desea llamar a un método en una instancia o acceder a una propiedad de instancia.
El segundo, ::, se usa cuando desea llamar a un static método, acceder a una static variable o llamar a la versión de una clase principal de un método dentro de una clase secundaria.

Operador doble flecha:
=>, Se utiliza como mecanismo de acceso para matrices. Esto significa que lo que está en el lado izquierdo tendrá un valor correspondiente a lo que está en el lado derecho en el contexto de la matriz. 


11/10/22--------------------------------------------------------------------------
TEMA 5 PERSISTENCIA DE DATOS.

Tablas de las base de datos:
departamentos (id, codigo, denominacion)
id = bigserial
codigo = unique
el * signidica es que no puede ser null

sudo apt update --> hacer a diario
sudo apt install postgresql
sudo systemctl status postgresql.service
sudo -u postgres psql -l
sudo -u postgres createuser -P empresa
sudo -u postgres createdb empresa
psql -h localhost -d empresa -U empresa
psql -h localhost -d empresa -U empresa < empresa.sql     (inyectar la base de datos)

\d relaciones
\q salir
psql  -->  para entrar (siempre sin sudo)
puerto del postgre 5432
fixtures --> datos para trabajar la base de datos.

chmod a+x crear.sh

./ crear.sh  -->  para crear

extensión del code -->  postresql Explorer
dbeaver  -->  herramienta

git init
git add .
git commit -m "Carga inicial"
gh repo create (segunda opción)

sudo apt install php8.1-pgsql

sudo apt --purge autoremove


13/10/22---------------------------------------------------------------
fetchAll --> Da un array con todas las filas.
fetch --> Devuelve una fila.
fetchColumn --> Devuelve una columna (la primera).

begintransaction

- transacciones (nivel aislamiento)
- bloqueos explicitos LOCK TABLE departamentos IN SHARE MODE (modo compartido y no hay cambios concurrentes en la tabla).

- exclusive mode -> crea una cola de espera.

Inyección de código sql, lo evita la consulta parametrizada.

Consultas:
- constante: query
- parametrizada: prepare
		 execute
		 
*objetos pdo statement 


14/10/22-------------------------------------------------------------
sql --> Translate 
ejemplo --> select translate ('Informatica', 'àèìòù', 'aeiou');

- Devuelve filas (Estática): query

- No devuelve filas (Estática): exec

- Devuelve filas (Dinámica): prepare
                             execute


17/10/22---------------------------------------------------------------
location --> php ya le pone la cabecera correspondiente (ej 301)
CRUD --> create, read, update, delete
rowCount() --> numero de filas afectadas por la ultima consulta.


SQL		PHP
NULL	<->	NULL
bool	<->	bool
int	<->	int
resto 	<->	string

Post/redirect/get   -->  para que el cliente no repita el post dandole a refrescar. De esta forma repite el get.

*./crear.sh

fetchColumn devuelve INT o BOOL (false)
false == 0
siempre utilizar === para diferenciar el false y el 0


20/10/22----------------------------------------------------------------
Filtrar código: validación y saneado.


21/10/22----------------------------------------------------------------
filter_input(...)
- dato  -->  Si es correcto.
- false -->  Si no es correcto.
- null  -->  Si no hay nada.

*función calable.
*función anónima

TODO --> Esta por hacer.

FETCH_ASSOC




























































































