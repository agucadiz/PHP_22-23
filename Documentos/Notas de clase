22-09-22-------------------------------------------------------------------------------------
Request & response
GET & POST
Protocolo HTTP

Cookies --> 4 Kbytes --> 50 cookies --> 200 Kbytes max

sudo dpkg -i __________________________________ --> para instalar un paquete
sudo apt -f install --> si da algún error

Ciente    --> Servidor Web	--> Servidor de aplicaciones	--> SGBD     --> BD
Navegador --> Apache   		--> PHP 			--> Postgres --> BD


23-09-22------------------------------------------------------------------------------------
SAPI (cli, apache2, php-fpm)

cd /etc/php/8.1/cli
sudo nano php.ini
control + W --> Buscar en nano
error_reporting = E_ALL
display_errors = On
display_startup_errors = On
date.timezone = 'UTC'

cd conf.d  --> Modulos disponibles

Modos de ejecución PHP:
- Por lotes (script)
- Interactivo --> php -a (consola)  //  psysh  (Control + D) --> Salir

wget https://psysh.org/psysh
chmod +x psysh
sudo chown root.root psysh
sudo mv psysh /usr/local/bin

psysh (control+c para salir)

control + f1
activar la sincronización

control + , --> parametros de configuración del code


26-09-22-------------------------------------------------------------------------------------
Todas las variables empiezan por $
Destruir variable: unset()
Asignación compuesta

Asignación por referencia:
$x = 4;
$y = & $x; ($y = 4)

Variables predefinidas:
Variables super-globales: $_variable
$argc --> Número de argumentos pasados a un script
$argv --> Array de argumentos pasados a un script


27-09-22-------------------------------------------------------------------------------------
red.string.php  -->  Manipulación de cadenas
- strlen()
- trim()
- strpos() --> Encuentra la primera ocurrencia de un substring en un string.
- strstr() --> Encuentra la primera aparición de un string

Extensión mbstring (importante)

php -i | less

sudo apt install php8.1-mbstring --> INSTALAR

mb_substr()

mb --> para caracteres especiales como ñ o á

isset()  -->  Si la variable existe y no es nula.
empty() 
gettype()
is_numeric()
ctype_digit() --> espera un string

Manipulación de tipos.
Forzado de tipos.


29-09-22---------------------------------------------------------------------------------------POR AQUI
operador ternario:
condicion ? expresion1 : expresion2
1 == 1    ? "si"       : "no"        -->  ("si") 

Operador Elvis:
Expresion1 ?: Expresion2  
"hola"     ?: "pepe"      -->  ("hola")
""         ?: "pepe"      -->  ("pepe")

Estructuras de control:
- Secuencial  -->  Bloque de código
- Repetitiva  -->  while, do while, for
- Selectiva   -->  if, if else, switch
- Alternativa -->  if endif, switch endswitch...


30-09-22---------------------------------------------------------------------------------------
foreach ($a as $k => $v) {
	echo $v "\n";
	}

funciones array --> filter, reduce, map...

& --> paso por referencia, función impura, cambia el array original.

$b = $a;  --> lo copia.
$b = &$a; --> asignación por referencia, apunta al objeto.

interpolación de cadenas o expansión de variable.
echo "$k => $v\n";

print_r($a) -->  para volcar las variables.

var_dump() --> para depuración.

array_merge() --> unir arrays

label (for) = input (id)

php -S   -->   Encender el servidor PHP

php -S 0.0.0.0:8000  (Encender el servidor)

127.0.0.1:8000  -->  para encender el servidor

$_GET[] --> variable super global

Son equivalentes:
<?php echo $_GET['dni'] ?>
<?= $_GET['dni'] ?>


03-10-22
Paso de argumentos por valor

require, require_once, include, include_once

Diferencia del require y el include es que el require da un error y para el programa y el include da un warning y el programa sigue. Se utiliza mas el require pq nos interesa que nos de el error y pare el programa.

const --> puedes utilizarlo en ambito global y local
variable global --> solo global (amenos que se ponga en el ambito local 
global $varible. --> Mejor no utilizar variables globales.

ricpelo / dwese 2022 2023 ----------------> git hub

04-10-22------------------------------------------------------------------------
gh auth login
argumento por referencia --> mirar &argumento (es un argumento mutable)
parametros por defecto siempre al final
Tipo unión --> float | string
declare(strict_types=1); --> tipado estricto
void no devuelve nada, void != null
?float --> tipo nulable = float | null


06-11-22-------------------------------------------------------------------------
extract()  -->  crear variables.  $var = ['x' => 4, 'y' => 3]
compact()  -->  Al revés. $x = 4, $y = 3

in_array(aguja, pajar)
array_chunk($a, 2) --> Array de arrays
array_keys()
array_values()
array_combine($x, $y)
array_shift() --> como el pop() pero el primero.
array_unshift -->lo introduce al principio del array.
$a[]=3  --> introduce el 3 al final del array.

funciones de orden superior:
array_map()
array_filter()
array_reduce()


07-10-22------------------------------------------------------------------------
Manipular con fechas:
date('Y-m-d  H:i:s w')  -->  Formatear una hora en tiempo Unix.
time()  -->  Devuelve el tiempo unix.

new --> instanciar una clase.

__Construct  -->  Constructor

$fecha = new DateTime();

instanceof --> Da verdadero o falso.

::  -->  Operador de resolución de ámbito. (DateTimeInterface::ATOM) Es un token que permite acceder a elementos estáticos, constantes, y sobrescribir propiedades o métodos de una clase.

Estructura de clase:
- Clase.
- Interfaz.
- Rasgo.

$fecha -> getTimezone()

Zona horaria que utilizamos es Europa/Madrid.

Orientación a objetos:
$fecha->setTimezone(new DateTimeZone('Europe/Madrid'));

$dos_dias = new DateInterval('P2D')

Referencias al objeto:
$nueva = $fecha; 	Asignación por valor (variable(*) no compartida).
$nueva = &$fecha; 	Asignación por referencia (variable(*) compartida).
$nueva = clone $fecha; 	Clona el objeto.

Comparación de objetos:
- Comparación flexible		$a==$b		¿Son iguales?
- Comparación estricta		$a===$b		¿Son identicos?

Propiedades predeterminada de un objeto, viene definida por la clase del objeto.

unset()  -->  Destruye variables.

Casting:
(object) [...];  -->  Crea un objeto y los elementos del array son las propiedades del objeto.
(array) [...];  -->  Crea un array de un objeto.

get_class(...)  -->  Te da el nombre de la clase.


10/10/22-------------------------------------------------------------------------
Error -->
Excepción --> Los creamos nosotros.

Manejador de errores --> set_error_handler(...)

try{
...
} catch {
...
} finally {
...
}

PHP tiene dos operadores de objetos.
El primero, ->, se usa cuando desea llamar a un método en una instancia o acceder a una propiedad de instancia.
El segundo, ::, se usa cuando desea llamar a un static método, acceder a una static variable o llamar a la versión de una clase principal de un método dentro de una clase secundaria.

Operador doble flecha:
=>, Se utiliza como mecanismo de acceso para matrices. Esto significa que lo que está en el lado izquierdo tendrá un valor correspondiente a lo que está en el lado derecho en el contexto de la matriz. 


11/10/22--------------------------------------------------------------------------
TEMA 5 PERSISTENCIA DE DATOS.

Tablas de las base de datos:
departamentos (id, codigo, denominacion)
id = bigserial
codigo = unique
el * signidica es que no puede ser null

sudo apt update --> hacer a diario
sudo apt install postgresql
sudo systemctl status postgresql.service
sudo -u postgres psql -l
sudo -u postgres createuser -P empresa
sudo -u postgres createdb empresa
psql -h localhost -d empresa -U empresa
psql -h localhost -d empresa -U empresa < empresa.sql     (inyectar la base de datos)


\d relaciones
\q salir
psql  -->  para entrar (siempre sin sudo)
puerto del postgre 5432
fixtures --> datos para trabajar la base de datos.

chmod a+x crear.sh

./ crear.sh  -->  para crear

extensión del code -->  postresql Explorer
dbeaver  -->  herramienta

git init
git add .
git commit -m "Carga inicial"
gh repo create (segunda opción)

sudo apt install php8.1-pgsql

sudo apt --purge autoremove


13/10/22---------------------------------------------------------------
fetchAll --> Da un array con todas las filas.
fetch --> Devuelve una fila.
fetchColumn --> Devuelve una columna (la primera).

begintransaction

- transacciones (nivel aislamiento)
- bloqueos explicitos LOCK TABLE departamentos IN SHARE MODE (modo compartido y no hay cambios concurrentes en la tabla).

- exclusive mode -> crea una cola de espera.

Inyección de código sql, lo evita la consulta parametrizada.

Consultas:
- constante: query
- parametrizada: prepare
		 execute
		 
*objetos pdo statement 


14/10/22-------------------------------------------------------------
sql --> Translate 
ejemplo --> select translate ('Informatica', 'àèìòù', 'aeiou');

- Devuelve filas (Estática): query

- No devuelve filas (Estática): exec

- Devuelve filas (Dinámica): prepare
                             execute


17/10/22---------------------------------------------------------------
location --> php ya le pone la cabecera correspondiente (ej 301)
CRUD --> create, read, update, delete
rowCount() --> numero de filas afectadas por la ultima consulta.


SQL		PHP
NULL	<->	NULL
bool	<->	bool
int	<->	int
resto 	<->	string

Post/redirect/get   -->  para que el cliente no repita el post dandole a refrescar. De esta forma repite el get.

*./crear.sh

fetchColumn devuelve INT o BOOL (false)
false == 0
siempre utilizar === para diferenciar el false y el 0


20/10/22----------------------------------------------------------------
Filtrar código: validación y saneado.


21/10/22----------------------------------------------------------------
filter_input(...)
- dato  -->  Si es correcto.
- false -->  Si no es correcto.
- null  -->  Si no hay nada.

*función calable.
*función anónima

TODO --> Esta por hacer.

FETCH_ASSOC


24/10/22----------------------------------------------------------------
sudo dpkg --configure -a
sudo apt update
sudo apt dist-upgrade

extract(...)  -->  Extrae variables


25/10/25-------------------------------------------------------------

sudo apt purge postgresql-14
sudo nano /etc/postgresql/15/main/postgresql.conf
(713)timezone = 'UTC'
port 5432
sudo systemctl restart postgresql.service

sudo -u postgres createuser -P empresa
sudo -u postgres createdb -O empresa empresa
select * from empleados e join departamentos d on e.departamento_id = d.id;


31/10/2022-------------------------------------------------------------
SEGURIDAD
- Inyección de código SQL  -->  PDO
- Cross-Site Scripting (XSS)
	* Persistente
	* No persistente
	--> htmlspecialchars($x, ENT_QUOTES | ENT_SUBSITUTE)
	
a??b  -->  Si es null a sino b


03/11/2022--------------------------------------------------------------
COOKIES
1º Crear: setcookie(...)
2º Comprobar: $_COOKIE

para borrar una cookie se le pone el valor 1

SESIONES
iniciar / continuar: session_start()
*Crea la cookie PHPSESSID
*Se pone lo primero de todo, primera linea y primera columna.
*Se pone en todos los archivos, menos en los auxiliares.
*$_SESSION --> Array asociativo que contiene las variables de sesión


04/11/2022--------------------------------------------------------------
CSRF  -->  Cross-Site Request Forgery
Acciones peligrosas siempre van con POST


07/11/2022--------------------------------------------------------------
- Front-office: portal de los clientes.
- Back-office: panel de administración.

CREAR NUEVO PROYECTO:
- Crear nuevo repositorio y elegir Licencia GNU3.
- Create Project y elige apariencia Board.
- Debe ser público.

- Opción Workflows:
Item added to project --> ON Pull request / Status in Progress
Item reopened --> ON

-Issues
Assignees --> a ti mismo.
Labels  --> puedes poner una establecida o crearte una.
Projects --> tu proyecto.
Status --> Todo/Status/In progress

Crear una rama nueva para cada incidencia
git checkout -b index-articulos

pushear la rama -u solo la primera vez
git push -u origin (rama) 

pull request --> fusionar las dos ramas. OJO mirar pull request(github) y merge(git).

Closes #  -->  elegir incidencia OJO mirar el pull request!!!!

La primera vez -->  git push -u origin

git remote prune origin
Git pull = Fetch y merge


08/11/2022-------------------------------------------------------------------

rebase  --> Reescribe commits


10/11/2022--------------------------------------------------------------------
TAILWIND
sudo apt install npm  -->  Gestor de dependencias de JS.
npm install -D tailwindcss  -->  Hay q hacerlo en la raid del proyecto.
npx tailwindcss init

cat package.json  -->  Versiones que son compatibles.

node_module  -->  Va siempre en el .gitignore

public  -->  carpeta que va a contener todo lo que yo quiero q se vea en la web.
src  -->  Es la carpeta comunes. Carpeta que no quieres que sean publicados.

php -S localhost:8000 -t public

  content: ["./public/**/*.{html,php}"],
  theme: {
    extend: {},
  },
  plugins: [],
}

*tree

npx tailwindcss -i ./src/input.css -o ./public/css/output.css --watch

flowbite  -->  entra y luego dale a github

docs  -->  ir a quickstar

npm install -D flowbite  -->  el -D hay q ponerlo para hacerlo mas correcto.

OJO mirar enlaces simbolicos:
ln -s ../../node_module/flowbite/dist/flowbite.js .

tree public  -->  ve el arbol de carpetas de public.

publish --> enlaces simbolicos a public.

gh browse  -->  abre el gh desde la terminal.


14/11/2022---------------------------------------------------------------
metodo = función dentro de una clase.

$pdo = $pdo ?? conectar()   -->   Si el $pdo es null entonces conectar()
				  sino $pdo.
				  
unserialize(carrito())  -->  crea un objeto nuevo
serialize($carrito)  -->  crea un array del objeto.


15/11/2022---------------------------------------------------------------
git branch -a      (te muestra todas las ramas aunque no esten en local).
fork  -->  tiene un marcador para forkear todas las ramas, no solo la main.


17/11/2022---------------------------------------------------------------
alter database template1 refresh collation version;

sudo -u postgres psql 
create extension pgcrypto; 

alter database postgres/template1 refresh collation version  -->  ponerlo si da error.

select crypt('pepe', gen_salt('bf', 10)

mantenimiento
git banch -d portal
git remote prune origin

sudo -u postgres psql tienda   --> entrar en tienda


18/11/22-------------------------------------------------------------------
git pull
git branch -d login
git remote prune origin


22/11/22-------------------------------------------------------------------
admin / admin

articulo -> carrito -> linea
* Una linea puede estar en un carrito.
* Un carrito puede tener muchas lineas.
* Una linea puede tener un articulo.
* Un articulo puede estar en muchas lineas.
* Muchos carritos pueden estar en muchos articulos y viceversa.

var_dump() die()

La clase usa un rasgo(un trozo de código)
use Obtenible;


22/11/2022--------------------------------------------------------------
package.json  -->  mirar
¿run?

** namespace **
Nombre corto -> Articulo
Nombre totalmente cualificado (FQN) -> \Tablas\Articulo
la \ significa direccion absoluta y espacio de nombre global.
control + espacio = autocompletar --> detecta el espacio de nombres.

str_replace

tailwind.config.js
"./public...
"./src/**/_*.{html,php}",
".node_modules...


24/11/2022--------------------------------------------------------------
RETURNING  -->  ID Factura

nmp  -->  package.json, package-locl.json, node_modules

** COMPOSER **
Gestor de dependencias.

composer  -->  composer.json(paquetes de las que depende, dependicias, que son paquetes que han hecho otras personas.), composer.lock (bloquea versiones y se trabaja con esa version concreta), vendor

getcomposer.org

sudo apt install composer
composer -V

packagist.org   -->  Repositorio de paquetes de php
mpdf/mpdf  -->  buscando pdf

versiones
x.y.z
x=mayor
y=menor
z=parche

^ -> Se puede cambiar los dos numeros de la derecha pero no el mas a la izquiera EJ 6.5.3
virigulilla -> minimo de version

madewithlove  -->  practiccas las versiones

composer require mpdf/mpdf  -> En la raiz del proyecto.

En el .gitignore hay que meter el vendor (junto al node_modules)

hace un autoloading

En el composer.json hay que especificar:
"autoload": {
        "psr-4": {"App\\": "src/"}
    }

prefijo -> App

composer dump-autoload  -->  refresca los paquetes del composer.


25/11/2022--------------------------------------------------------------
dashboard.php
Datetime::createFromFormat  

localtiemstamp(0)  -> en la tabla para que no guarde microsegundos.

ln -s ../../node_modules/flowbite/dist flowbite   !!!OJO


28/11/2022--------------------------------------------------------------
composer install (crea composer.json y composer.lock y vendor)
composer require 
composer update [nombre de paquete]  -->  actualiza los paquetes (hay q tener cuidado).
dump-autoload  -->  actualiza la carga automatica

npm  -->  package.json, package-lock y node_modules.

Entorno (environment):
- Desarrollo: programador 
	      entorno local
	      php -S
	      BD local
	      datos ficticios

- Producción: remota
	      cloud
	      servidor web profesional
	      BD remotas


php_codesniffer  -> paquete para detectar errores.

-- dev  (le dices al composer que es una dependencia de desarrollo)

require blau blau blau  --dev

npm install -D flowbite


29/11/2022-----------------------------------------------------------------------------
carbon  -->  extensión de datetime para incorporarle internacionalización.

php-fig.org  -->  colaboraciones y estándares (crean recomendaciones)


01/12/2022-----------------------------------------------------------------------------
Modelo Vista Controlador (MVC)
Modelo -> Representa la información, representa al cliente dentro del programa. accede a la información de la base de datos.
Vista -> Genera un resultado del modelo. Son grandes.
Controlador -> Dirige las operaciones que van a generar la respuesta. Son los mas grandes.

cliente -> router -> controlador -> modelo -> BD -> modelo -> controlador -> vista -> cliente
*************************************************************

composer create-project laravel/laravel tiendalaravel
cd tiendalaravel
git init
git add .
git commit -m "Carga inicial"

-extensiones-
Laravel Extension Pack

php artisan  -->  te muestran todos los comandos que se puede hacer con artisan.

php artisan serve

routers  -->  puntos de acceso del programa.

blade  -->  motor de plantillas.


02/12/2022------------------------------------------------------------------------------
**LARAVEL*********************
index.php  -->  front controller  -->  recibir peticios y cargar el framework

kernel (núcleo del programa y recibe la entrada que viene por request y la gestiona generando una respuesta, y esa respues despues se envia).
- http (index.php)  -->  Router(controlador o clausura(cuando es muy simple))
- console (artisan)

artisan es un script php.

php artisan serve  -->  para arracar server
npm run dev  -->  --watch   ¡¡NO FUNCIONA!!

blade  -->  motor de plantilla

@auth  -->  si el usuario esta autenticado.

.env  -->  no se pasa en el commit y hay q reconstruir cada vez que clonas.

**parametros de coneccion de la base de datos (tiendalaravel)**  ¿¿DONDE?? ¿.ENV?
de_connecion=pgsql
port=5432
database=tiendalaravel
username=tienda
password=tienda

**MIGRACIONES**
Migraciones son controles de versiones para la BBDD.

- up  -->  Aplicando
- down  -->  Desaplicando

Todas las columnas son not null amenos que se le ponga nullable().

php artisan migrate:install
php artisan migrate:status
php artisan migrate

php artisan db   -->  te abre la bd   (\d)

php artisan tinker  -->  Te abre un psyshell

capas BBDD
- Eloquet (activación active record)
- QueryBuilder
- DB::

breeze  -->  Te mete el tailwind

composer require laravel/breeze --dev
php artisan breeze:install

guest --> invitado
auth --> autenticado

layaout  -->  plantilla la cual se renderizan las vistas.
componentes  -->  <x-...>

$slot  -->  todo lo que metas en $guet y /$guet aparece ahi.

render vs redirect  (diferenciar)

service container  ->  mirar, si eso.


------------------------------------------------------------------------------------
EXAMEN
if(...):
else: 
endinf

Buscar y reemplazar.

Mirar boton sin existencias con clases.

viernes 13 -> Examen


15/12/22-------------------------------------------------------------------------------------

Fron controler solo un index.php en el public.

kernel(interfaz)->make(pide a la aplicacion que instancie una clase)
kernel = manejar una petición.

handle -> recibe la petición y manda la respuesta.

Inyeccion de contenedor de dependencias --> DIC

providers --> Encargados de levantar servicios.

config***************************
'name' --> Nombre de la aplicación
'env  -->  El entorno, por defecto es producción. Local.
'debug'  -->  modo depuración, se muestran errores mas detallados.
'locale'  -->  Localizacion, podria estar en español.

Para arrancar la aplicacion:
php artisan serve
npm run dev

breeze (login register)

php artisan db --> desde terminal para ver la bd.

php artisan route:list  -->  rutas de la aplicación

web.php --> route

renderizado(no cambia la url) no es una redirección(si cambia la url)

middleware  -->  filtros q tiene q atravesar (CSRF, trim, auth, verified...)
sino no llega la petición a donde debe de llegar. En la entrada pero tb puede usarse en la salida.
app/http/middleware

*************************************************************************
Para poder acceder a la BD hay 3 formas depende de la capa:

Patrón Active Record -> Eloquent----------------------------------------
ORM --> Object-Relational Mapping
Asocia las tablas con clases.
Modelos son siempre eloquent, son instancias de eloquent

FORMA INDIRECTA---------------------------------------------------------
Independiente de la BD
Query Builder (métodos orientados a objetos)
DB::table('users')->get()

FORMA DIRECTA-----------------------------------------------------------
SQL
DB::select ...
DB::insert ...
DB::delete ...


artisan tinker

-- help  -> ayuda de los comandos que se puede utilizar.

Crear tabla, migracion y tb el modelo:
php artisan make:model -m Articulo

(-m es la migracion) 

php artisan migrate:status  -->  Estado
php artisan migrate  -->  Realizar migración
php artisan db  -->  Entra en la BD

$a = new Articulo();
$a->save()   --> guardar la fila con los cambios realizado.
Articulo::all()
Articulo::find(1)


16/12/2022------------------------------------------------------------------------------
-primero ruta: web.php
return view: portal

clockwork  -->  Extension interesante de instalar
+ paquete de composer
f12 pestaña clockwork
composer require itsgoingd/clockwork

Barra de depuración de laravel
laravel debugbar
paquete de composer
composer require...

<x-guest-layour> ('x-' quiere decir que es un componente)

f12 views -> se ven las plantillas que se estan utilizando.

guest.blade.php -> layout

flowbite/laravel -> Documentación

************************
npm install -D flowbite

layout > vista > .blade.php

control + p  = te busca el fichero

-------------------------------------------------------------
web.php
portal.blade.php 
layouts/guest/guest.blade.php (plantilla)
	      navigation.blade.php
app/view/components
GuestLayout.php (clase)

componentes:
- Clases		app/View/Components (clase + plantilla)
			archivos.php
- Plantillas		resources/views/

*******************************
extension inline fold

dd()    -->  Es un var_dumb() y die()


19/12/2022----------------------------------------------------
name(...)  -->  nombre de la ruta
whereNumber(...)  -->  ciertos patrones a ciertos parametros

variable flash(...)  -->  Dura solo un turno.

Cuando se mete mano al composer hay q retocar el autoload, pq puede que no lo coja.

has(...)  -->  Te devuelve true si la variable existe.
missing(...)  -->  Si le falta...  lo haces.

php artisan db
\d facturas


20/12/2022--------------------------------------------------------
**************************
DESPUES DE CLONAR
composer install
npm install

cp .env.example .env   --> (Configurarlo)
php artisan key:generate    --> (APP KEY)

php artisan db
php artisan migrate
Datos de prueba:

php artisan serve
nmp run dev


CREAR PROYECTO
composer create-project laravel/laravel
Todos los pasos anteriores menos el composer.

*belongsTo se pone al que tiene la clave ajena*

$f->user->name





















